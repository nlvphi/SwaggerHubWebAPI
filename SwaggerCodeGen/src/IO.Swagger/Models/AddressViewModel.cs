/*
 * Appraisal Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AddressViewModel : IEquatable<AddressViewModel>
    { 
        /// <summary>
        /// Gets or Sets StreetNo
        /// </summary>

        [MaxLength(256)]
        [DataMember(Name="StreetNo")]
        public string StreetNo { get; set; }

        /// <summary>
        /// Gets or Sets Address1
        /// </summary>

        [MaxLength(256)]
        [DataMember(Name="Address1")]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or Sets Address2
        /// </summary>

        [MaxLength(256)]
        [DataMember(Name="Address2")]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>

        [MaxLength(512)]
        [DataMember(Name="City")]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets PostCode
        /// </summary>

        [MaxLength(15)]
        [DataMember(Name="PostCode")]
        public string PostCode { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [MaxLength(80)]
        [DataMember(Name="State")]
        public string State { get; set; }

        /// <summary>
        /// Country Code in ISO 3 format
        /// </summary>
        /// <value>Country Code in ISO 3 format</value>

        [MaxLength(3)]
        [DataMember(Name="CountryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressViewModel {\n");
            sb.Append("  StreetNo: ").Append(StreetNo).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AddressViewModel)obj);
        }

        /// <summary>
        /// Returns true if AddressViewModel instances are equal
        /// </summary>
        /// <param name="other">Instance of AddressViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressViewModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StreetNo == other.StreetNo ||
                    StreetNo != null &&
                    StreetNo.Equals(other.StreetNo)
                ) && 
                (
                    Address1 == other.Address1 ||
                    Address1 != null &&
                    Address1.Equals(other.Address1)
                ) && 
                (
                    Address2 == other.Address2 ||
                    Address2 != null &&
                    Address2.Equals(other.Address2)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    PostCode == other.PostCode ||
                    PostCode != null &&
                    PostCode.Equals(other.PostCode)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    CountryCode == other.CountryCode ||
                    CountryCode != null &&
                    CountryCode.Equals(other.CountryCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StreetNo != null)
                    hashCode = hashCode * 59 + StreetNo.GetHashCode();
                    if (Address1 != null)
                    hashCode = hashCode * 59 + Address1.GetHashCode();
                    if (Address2 != null)
                    hashCode = hashCode * 59 + Address2.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (PostCode != null)
                    hashCode = hashCode * 59 + PostCode.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (CountryCode != null)
                    hashCode = hashCode * 59 + CountryCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AddressViewModel left, AddressViewModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AddressViewModel left, AddressViewModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
