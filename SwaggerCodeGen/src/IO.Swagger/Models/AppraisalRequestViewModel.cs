/*
 * Appraisal Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AppraisalRequestViewModel : IEquatable<AppraisalRequestViewModel>
    { 
        /// <summary>
        /// Appraisal key in Titan system
        /// </summary>
        /// <value>Appraisal key in Titan system</value>

        [DataMember(Name="AppraisalKey")]
        public int? AppraisalKey { get; set; }

        /// <summary>
        /// Appraisal key in Third Party system
        /// </summary>
        /// <value>Appraisal key in Third Party system</value>
        [Required]

        [StringLength(40, MinimumLength=1)]
        [DataMember(Name="ExternalAppraisalKey")]
        public string ExternalAppraisalKey { get; set; }

        /// <summary>
        /// Gets or Sets AppraisedDate
        /// </summary>

        [DataMember(Name="AppraisedDate")]
        public DateTime? AppraisedDate { get; set; }

        /// <summary>
        /// Gets or Sets AppraisedNote
        /// </summary>

        [MaxLength(4000)]
        [DataMember(Name="AppraisedNote")]
        public string AppraisedNote { get; set; }

        /// <summary>
        /// Appraised value of vehicle
        /// </summary>
        /// <value>Appraised value of vehicle</value>

        [DataMember(Name="StockValue")]
        public double? StockValue { get; set; }

        /// <summary>
        /// 1: Redbook, 2: Glassguide, 3: M&amp;M
        /// </summary>
        /// <value>1: Redbook, 2: Glassguide, 3: M&amp;M</value>

        [Range(1, 3)]
        [DataMember(Name="VehiclePricingGuideConditionCodeSourceCode")]
        public int? VehiclePricingGuideConditionCodeSourceCode { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationExpiryDate
        /// </summary>

        [DataMember(Name="RegistrationExpiryDate")]
        public DateTime? RegistrationExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets Odometer
        /// </summary>

        [DataMember(Name="Odometer")]
        public int? Odometer { get; set; }

        /// <summary>
        /// Id get from GET Locations API
        /// </summary>
        /// <value>Id get from GET Locations API</value>
        [Required]

        [DataMember(Name="LocationId")]
        public int? LocationId { get; set; }

        /// <summary>
        /// Gets or Sets CancellationReason
        /// </summary>

        [MaxLength(128)]
        [DataMember(Name="CancellationReason")]
        public string CancellationReason { get; set; }

        /// <summary>
        /// Gets or Sets OwnerCustomerKey
        /// </summary>

        [DataMember(Name="OwnerCustomerKey")]
        public int? OwnerCustomerKey { get; set; }

        /// <summary>
        /// Employee User ID of Salesperson
        /// </summary>
        /// <value>Employee User ID of Salesperson</value>

        [MaxLength(5)]
        [DataMember(Name="Salesperson")]
        public string Salesperson { get; set; }

        /// <summary>
        /// Employee User ID of Appraiser
        /// </summary>
        /// <value>Employee User ID of Appraiser</value>

        [MaxLength(5)]
        [DataMember(Name="AppraisedBy")]
        public string AppraisedBy { get; set; }

        /// <summary>
        /// Customer value of vehicle
        /// </summary>
        /// <value>Customer value of vehicle</value>

        [DataMember(Name="TradeInValueTaxInclusive")]
        public double? TradeInValueTaxInclusive { get; set; }

        /// <summary>
        /// Future sale price of vehicle
        /// </summary>
        /// <value>Future sale price of vehicle</value>

        [DataMember(Name="RecommendedRetailPrice")]
        public double? RecommendedRetailPrice { get; set; }

        /// <summary>
        /// 1: Active, 2 Inactive  Default is 1
        /// </summary>
        /// <value>1: Active, 2 Inactive  Default is 1</value>

        [DataMember(Name="AppraisalStatusCode")]
        public int? AppraisalStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets AppraisalDate
        /// </summary>

        [DataMember(Name="AppraisalDate")]
        public DateTime? AppraisalDate { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedReconditionCost
        /// </summary>

        [DataMember(Name="EstimatedReconditionCost")]
        public double? EstimatedReconditionCost { get; set; }

        /// <summary>
        /// Date when the appraisal will expire
        /// </summary>
        /// <value>Date when the appraisal will expire</value>

        [DataMember(Name="ExpiryDate")]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// 1: Won, 2: Lost, 3: Cancelled
        /// </summary>
        /// <value>1: Won, 2: Lost, 3: Cancelled</value>

        [DataMember(Name="CloseStatusCode")]
        public int? CloseStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets Vehicle
        /// </summary>
        [Required]

        [DataMember(Name="Vehicle")]
        public VehicleRequestViewModel Vehicle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppraisalRequestViewModel {\n");
            sb.Append("  AppraisalKey: ").Append(AppraisalKey).Append("\n");
            sb.Append("  ExternalAppraisalKey: ").Append(ExternalAppraisalKey).Append("\n");
            sb.Append("  AppraisedDate: ").Append(AppraisedDate).Append("\n");
            sb.Append("  AppraisedNote: ").Append(AppraisedNote).Append("\n");
            sb.Append("  StockValue: ").Append(StockValue).Append("\n");
            sb.Append("  VehiclePricingGuideConditionCodeSourceCode: ").Append(VehiclePricingGuideConditionCodeSourceCode).Append("\n");
            sb.Append("  RegistrationExpiryDate: ").Append(RegistrationExpiryDate).Append("\n");
            sb.Append("  Odometer: ").Append(Odometer).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  CancellationReason: ").Append(CancellationReason).Append("\n");
            sb.Append("  OwnerCustomerKey: ").Append(OwnerCustomerKey).Append("\n");
            sb.Append("  Salesperson: ").Append(Salesperson).Append("\n");
            sb.Append("  AppraisedBy: ").Append(AppraisedBy).Append("\n");
            sb.Append("  TradeInValueTaxInclusive: ").Append(TradeInValueTaxInclusive).Append("\n");
            sb.Append("  RecommendedRetailPrice: ").Append(RecommendedRetailPrice).Append("\n");
            sb.Append("  AppraisalStatusCode: ").Append(AppraisalStatusCode).Append("\n");
            sb.Append("  AppraisalDate: ").Append(AppraisalDate).Append("\n");
            sb.Append("  EstimatedReconditionCost: ").Append(EstimatedReconditionCost).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  CloseStatusCode: ").Append(CloseStatusCode).Append("\n");
            sb.Append("  Vehicle: ").Append(Vehicle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AppraisalRequestViewModel)obj);
        }

        /// <summary>
        /// Returns true if AppraisalRequestViewModel instances are equal
        /// </summary>
        /// <param name="other">Instance of AppraisalRequestViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppraisalRequestViewModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AppraisalKey == other.AppraisalKey ||
                    AppraisalKey != null &&
                    AppraisalKey.Equals(other.AppraisalKey)
                ) && 
                (
                    ExternalAppraisalKey == other.ExternalAppraisalKey ||
                    ExternalAppraisalKey != null &&
                    ExternalAppraisalKey.Equals(other.ExternalAppraisalKey)
                ) && 
                (
                    AppraisedDate == other.AppraisedDate ||
                    AppraisedDate != null &&
                    AppraisedDate.Equals(other.AppraisedDate)
                ) && 
                (
                    AppraisedNote == other.AppraisedNote ||
                    AppraisedNote != null &&
                    AppraisedNote.Equals(other.AppraisedNote)
                ) && 
                (
                    StockValue == other.StockValue ||
                    StockValue != null &&
                    StockValue.Equals(other.StockValue)
                ) && 
                (
                    VehiclePricingGuideConditionCodeSourceCode == other.VehiclePricingGuideConditionCodeSourceCode ||
                    VehiclePricingGuideConditionCodeSourceCode != null &&
                    VehiclePricingGuideConditionCodeSourceCode.Equals(other.VehiclePricingGuideConditionCodeSourceCode)
                ) && 
                (
                    RegistrationExpiryDate == other.RegistrationExpiryDate ||
                    RegistrationExpiryDate != null &&
                    RegistrationExpiryDate.Equals(other.RegistrationExpiryDate)
                ) && 
                (
                    Odometer == other.Odometer ||
                    Odometer != null &&
                    Odometer.Equals(other.Odometer)
                ) && 
                (
                    LocationId == other.LocationId ||
                    LocationId != null &&
                    LocationId.Equals(other.LocationId)
                ) && 
                (
                    CancellationReason == other.CancellationReason ||
                    CancellationReason != null &&
                    CancellationReason.Equals(other.CancellationReason)
                ) && 
                (
                    OwnerCustomerKey == other.OwnerCustomerKey ||
                    OwnerCustomerKey != null &&
                    OwnerCustomerKey.Equals(other.OwnerCustomerKey)
                ) && 
                (
                    Salesperson == other.Salesperson ||
                    Salesperson != null &&
                    Salesperson.Equals(other.Salesperson)
                ) && 
                (
                    AppraisedBy == other.AppraisedBy ||
                    AppraisedBy != null &&
                    AppraisedBy.Equals(other.AppraisedBy)
                ) && 
                (
                    TradeInValueTaxInclusive == other.TradeInValueTaxInclusive ||
                    TradeInValueTaxInclusive != null &&
                    TradeInValueTaxInclusive.Equals(other.TradeInValueTaxInclusive)
                ) && 
                (
                    RecommendedRetailPrice == other.RecommendedRetailPrice ||
                    RecommendedRetailPrice != null &&
                    RecommendedRetailPrice.Equals(other.RecommendedRetailPrice)
                ) && 
                (
                    AppraisalStatusCode == other.AppraisalStatusCode ||
                    AppraisalStatusCode != null &&
                    AppraisalStatusCode.Equals(other.AppraisalStatusCode)
                ) && 
                (
                    AppraisalDate == other.AppraisalDate ||
                    AppraisalDate != null &&
                    AppraisalDate.Equals(other.AppraisalDate)
                ) && 
                (
                    EstimatedReconditionCost == other.EstimatedReconditionCost ||
                    EstimatedReconditionCost != null &&
                    EstimatedReconditionCost.Equals(other.EstimatedReconditionCost)
                ) && 
                (
                    ExpiryDate == other.ExpiryDate ||
                    ExpiryDate != null &&
                    ExpiryDate.Equals(other.ExpiryDate)
                ) && 
                (
                    CloseStatusCode == other.CloseStatusCode ||
                    CloseStatusCode != null &&
                    CloseStatusCode.Equals(other.CloseStatusCode)
                ) && 
                (
                    Vehicle == other.Vehicle ||
                    Vehicle != null &&
                    Vehicle.Equals(other.Vehicle)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AppraisalKey != null)
                    hashCode = hashCode * 59 + AppraisalKey.GetHashCode();
                    if (ExternalAppraisalKey != null)
                    hashCode = hashCode * 59 + ExternalAppraisalKey.GetHashCode();
                    if (AppraisedDate != null)
                    hashCode = hashCode * 59 + AppraisedDate.GetHashCode();
                    if (AppraisedNote != null)
                    hashCode = hashCode * 59 + AppraisedNote.GetHashCode();
                    if (StockValue != null)
                    hashCode = hashCode * 59 + StockValue.GetHashCode();
                    if (VehiclePricingGuideConditionCodeSourceCode != null)
                    hashCode = hashCode * 59 + VehiclePricingGuideConditionCodeSourceCode.GetHashCode();
                    if (RegistrationExpiryDate != null)
                    hashCode = hashCode * 59 + RegistrationExpiryDate.GetHashCode();
                    if (Odometer != null)
                    hashCode = hashCode * 59 + Odometer.GetHashCode();
                    if (LocationId != null)
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                    if (CancellationReason != null)
                    hashCode = hashCode * 59 + CancellationReason.GetHashCode();
                    if (OwnerCustomerKey != null)
                    hashCode = hashCode * 59 + OwnerCustomerKey.GetHashCode();
                    if (Salesperson != null)
                    hashCode = hashCode * 59 + Salesperson.GetHashCode();
                    if (AppraisedBy != null)
                    hashCode = hashCode * 59 + AppraisedBy.GetHashCode();
                    if (TradeInValueTaxInclusive != null)
                    hashCode = hashCode * 59 + TradeInValueTaxInclusive.GetHashCode();
                    if (RecommendedRetailPrice != null)
                    hashCode = hashCode * 59 + RecommendedRetailPrice.GetHashCode();
                    if (AppraisalStatusCode != null)
                    hashCode = hashCode * 59 + AppraisalStatusCode.GetHashCode();
                    if (AppraisalDate != null)
                    hashCode = hashCode * 59 + AppraisalDate.GetHashCode();
                    if (EstimatedReconditionCost != null)
                    hashCode = hashCode * 59 + EstimatedReconditionCost.GetHashCode();
                    if (ExpiryDate != null)
                    hashCode = hashCode * 59 + ExpiryDate.GetHashCode();
                    if (CloseStatusCode != null)
                    hashCode = hashCode * 59 + CloseStatusCode.GetHashCode();
                    if (Vehicle != null)
                    hashCode = hashCode * 59 + Vehicle.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AppraisalRequestViewModel left, AppraisalRequestViewModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AppraisalRequestViewModel left, AppraisalRequestViewModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
