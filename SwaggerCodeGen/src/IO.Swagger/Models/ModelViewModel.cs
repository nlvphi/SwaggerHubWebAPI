/*
 * Appraisal Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ModelViewModel : IEquatable<ModelViewModel>
    { 
        /// <summary>
        /// Gets or Sets ModelId
        /// </summary>

        [DataMember(Name="ModelId")]
        public string ModelId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>

        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Badge
        /// </summary>

        [DataMember(Name="Badge")]
        public string Badge { get; set; }

        /// <summary>
        /// Gets or Sets Series
        /// </summary>

        [DataMember(Name="Series")]
        public string Series { get; set; }

        /// <summary>
        /// Gets or Sets EngineCode
        /// </summary>

        [DataMember(Name="EngineCode")]
        public string EngineCode { get; set; }

        /// <summary>
        /// Gets or Sets TransmissionCode
        /// </summary>

        [DataMember(Name="TransmissionCode")]
        public string TransmissionCode { get; set; }

        /// <summary>
        /// Gets or Sets VehicleType
        /// </summary>

        [DataMember(Name="VehicleType")]
        public int? VehicleType { get; set; }

        /// <summary>
        /// Gets or Sets FuelCode
        /// </summary>

        [DataMember(Name="FuelCode")]
        public int? FuelCode { get; set; }

        /// <summary>
        /// Gets or Sets BodyStyleCode
        /// </summary>

        [DataMember(Name="BodyStyleCode")]
        public int? BodyStyleCode { get; set; }

        /// <summary>
        /// Gets or Sets NoOfDoors
        /// </summary>

        [DataMember(Name="NoOfDoors")]
        public int? NoOfDoors { get; set; }

        /// <summary>
        /// Gets or Sets NoOfCylinders
        /// </summary>

        [DataMember(Name="NoOfCylinders")]
        public int? NoOfCylinders { get; set; }

        /// <summary>
        /// Gets or Sets ModelYear
        /// </summary>

        [DataMember(Name="ModelYear")]
        public int? ModelYear { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelViewModel {\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Badge: ").Append(Badge).Append("\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("  EngineCode: ").Append(EngineCode).Append("\n");
            sb.Append("  TransmissionCode: ").Append(TransmissionCode).Append("\n");
            sb.Append("  VehicleType: ").Append(VehicleType).Append("\n");
            sb.Append("  FuelCode: ").Append(FuelCode).Append("\n");
            sb.Append("  BodyStyleCode: ").Append(BodyStyleCode).Append("\n");
            sb.Append("  NoOfDoors: ").Append(NoOfDoors).Append("\n");
            sb.Append("  NoOfCylinders: ").Append(NoOfCylinders).Append("\n");
            sb.Append("  ModelYear: ").Append(ModelYear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ModelViewModel)obj);
        }

        /// <summary>
        /// Returns true if ModelViewModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelViewModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ModelId == other.ModelId ||
                    ModelId != null &&
                    ModelId.Equals(other.ModelId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Badge == other.Badge ||
                    Badge != null &&
                    Badge.Equals(other.Badge)
                ) && 
                (
                    Series == other.Series ||
                    Series != null &&
                    Series.Equals(other.Series)
                ) && 
                (
                    EngineCode == other.EngineCode ||
                    EngineCode != null &&
                    EngineCode.Equals(other.EngineCode)
                ) && 
                (
                    TransmissionCode == other.TransmissionCode ||
                    TransmissionCode != null &&
                    TransmissionCode.Equals(other.TransmissionCode)
                ) && 
                (
                    VehicleType == other.VehicleType ||
                    VehicleType != null &&
                    VehicleType.Equals(other.VehicleType)
                ) && 
                (
                    FuelCode == other.FuelCode ||
                    FuelCode != null &&
                    FuelCode.Equals(other.FuelCode)
                ) && 
                (
                    BodyStyleCode == other.BodyStyleCode ||
                    BodyStyleCode != null &&
                    BodyStyleCode.Equals(other.BodyStyleCode)
                ) && 
                (
                    NoOfDoors == other.NoOfDoors ||
                    NoOfDoors != null &&
                    NoOfDoors.Equals(other.NoOfDoors)
                ) && 
                (
                    NoOfCylinders == other.NoOfCylinders ||
                    NoOfCylinders != null &&
                    NoOfCylinders.Equals(other.NoOfCylinders)
                ) && 
                (
                    ModelYear == other.ModelYear ||
                    ModelYear != null &&
                    ModelYear.Equals(other.ModelYear)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ModelId != null)
                    hashCode = hashCode * 59 + ModelId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Badge != null)
                    hashCode = hashCode * 59 + Badge.GetHashCode();
                    if (Series != null)
                    hashCode = hashCode * 59 + Series.GetHashCode();
                    if (EngineCode != null)
                    hashCode = hashCode * 59 + EngineCode.GetHashCode();
                    if (TransmissionCode != null)
                    hashCode = hashCode * 59 + TransmissionCode.GetHashCode();
                    if (VehicleType != null)
                    hashCode = hashCode * 59 + VehicleType.GetHashCode();
                    if (FuelCode != null)
                    hashCode = hashCode * 59 + FuelCode.GetHashCode();
                    if (BodyStyleCode != null)
                    hashCode = hashCode * 59 + BodyStyleCode.GetHashCode();
                    if (NoOfDoors != null)
                    hashCode = hashCode * 59 + NoOfDoors.GetHashCode();
                    if (NoOfCylinders != null)
                    hashCode = hashCode * 59 + NoOfCylinders.GetHashCode();
                    if (ModelYear != null)
                    hashCode = hashCode * 59 + ModelYear.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ModelViewModel left, ModelViewModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ModelViewModel left, ModelViewModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
